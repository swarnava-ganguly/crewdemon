name: CI pipleine creation for Spring Boot application
on:
  push:
    branches:
      - main

env:
  DB_DATABASE: crewmeister
jobs:
    Build-and-Push:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
        name: Checkout the crewmeister repository          

      - name: Prerequisite 1 - Set up JDK 17
        uses: actions/setup-java@v4
        with:
            java-version: '17'
            distribution: 'temurin'
            cache: 'maven'

      - name: Prerequisite 2 - Build project crewmeister with Maven
        run: ./mvnw clean package -DskipTests 

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: swarnava28
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
            context: .
            push: true
            tags: swarnava28/java-app:latest
    Deploy:
      name: Deploy to Kubernetes
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create kubeconfig
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config
      - name: Create Namespace
        run: |
          kubectl get namespace | grep -q "application" || kubectl create namespace application
          kubectl get namespace | grep -q "database" || kubectl create namespace database
          kubectl get namespace
      - name: Configure Secrets
        run: |
          kubectl delete secret myregistrykey application --ignore-not-found
          kubectl create secret docker-registry myregistrykey --docker-username=${{ secrets.DOCKER_USERNAME }} --docker-password=${{ secrets.DOCKERHUB_TOKEN }} --docker-email=${{ secrets.DOCKER_EMAIL }} -n application
          echo ${{ secrets.APPLICATION_SECRETS_BASE64 }} | base64 --decode | kubectl apply -f -
          kubectl get secret -n application
          echo ${{ secrets.DATABASE_SECRETS_BASE64 }} | base64 --decode | kubectl apply -f -
          kubectl get secret -n database
          
      - name: Use context
        run: kubectl get nodes
