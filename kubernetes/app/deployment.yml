apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-app-deployment
spec:
  selector:
    matchLabels:
      app: java-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  replicas: 1
  template:
    metadata:
      labels:
        app: java-app
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: java-app
        # image: swarnava28/spring-boot-application:latest
        image: sample-java:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        # securityContext:
        #   runAsNonRoot: false
        #   runAsUser: 1000
        #   readOnlyRootFilesystem: false
        #   allowPrivilegeEscalation: true
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 3
        # readinessProbe:
        #   httpGet:
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 15
        #   periodSeconds: 30
        #   failureThreshold: 3
        env:
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: host

        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: dbName

        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: username

        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: password
---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata:
  # Metadata of the resource kind we are creating
  name: springboot-crud-svc
spec:
  selector:
    app: java-app
  ports:
  - protocol: "TCP"
    port: 8080 # The port that the service is running on in the cluster
    targetPort: 8080 # The port exposed by the service
  type: NodePort # type of the service.
